generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                 @id @default(autoincrement())
  email            String              @unique
  password         String
  phone            String?             @unique
  isAdmin          Boolean             @default(false)
  walletBalance    Float               @default(0)
  referralCode     String?             @unique
  referredBy       String?
  referralEarnings Float               @default(0)
  referralPoints   Int                 @default(0)
  referralLevel    Int                 @default(1)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt
  investments      Investment[]
  referrals        Referral[]
  createdTeams     Team[]              @relation("TeamCreator")
  teams            TeamMember[]
  walletTxns       WalletTransaction[]
}

model Investment {
  id            Int       @id @default(autoincrement())
  userId        Int
  planName      String
  amount        Float
  status        String    @default("pending_verification")
  transactionId String
  notes         String?
  screenshotUrl String?
  adminNotes    String?
  verifiedAt    DateTime?
  verifiedBy    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  user          User      @relation(fields: [userId], references: [id])
}

model WalletTransaction {
  id            Int      @id @default(autoincrement())
  userId        Int
  amount        Float
  type          String
  status        String
  gatewayTxnId  String?
  screenshotUrl String?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model GiftCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  amount    Float
  isUsed    Boolean   @default(false)
  usedBy    Int?
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  expiresAt DateTime?
}

model Referral {
  id           Int      @id @default(autoincrement())
  referrerId   Int
  referredUser String
  commission   Float    @default(0)
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  referrer     User     @relation(fields: [referrerId], references: [id])
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   Int
  createdBy   User         @relation("TeamCreator", fields: [creatorId], references: [id])
  members     TeamMember[]
}

model TeamMember {
  id       Int      @id @default(autoincrement())
  teamId   Int
  userId   Int
  role     String   @default("member")
  joinedAt DateTime @default(now())
  points   Int      @default(0)
  level    Int      @default(1)
  team     Team     @relation(fields: [teamId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}
